/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/admin/recache": {
    post: {
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  "/admin/users": {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": components["schemas"]["UserContract"][];
            "application/json": components["schemas"]["UserContract"][];
            "text/json": components["schemas"]["UserContract"][];
          };
        };
      };
    };
    patch: {
      parameters: {
        query: {
          id?: string;
          roles?: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": components["schemas"]["UserContract"];
            "application/json": components["schemas"]["UserContract"];
            "text/json": components["schemas"]["UserContract"];
          };
        };
        /** Unauthorized */
        401: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/admin/posts/mongo/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
        /** Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/admin/posts/mongo": {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": components["schemas"]["FullPostContract"][];
            "application/json": components["schemas"]["FullPostContract"][];
            "text/json": components["schemas"]["FullPostContract"][];
          };
        };
      };
    };
  };
  "/admin/posts/cached": {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": components["schemas"]["MinimalPostContract"][];
            "application/json": components["schemas"]["MinimalPostContract"][];
            "text/json": components["schemas"]["MinimalPostContract"][];
          };
        };
      };
    };
  };
  "/admin/posts/cached/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
        /** Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/OAuth/auth": {
    get: {
      responses: {
        /** Redirect */
        302: never;
      };
    };
  };
  "/OAuth/signout": {
    get: {
      responses: {
        /** Redirect */
        302: never;
      };
    };
  };
  "/posts/page/{page}": {
    get: {
      parameters: {
        path: {
          page: number;
        };
        query: {
          pageSize?: number;
          filter?: components["schemas"]["PostFilter"];
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": components["schemas"]["PageContract"];
            "application/json": components["schemas"]["PageContract"];
            "text/json": components["schemas"]["PageContract"];
          };
        };
        /** Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/posts/page/pinned": {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": components["schemas"]["PageContract"];
            "application/json": components["schemas"]["PageContract"];
            "text/json": components["schemas"]["PageContract"];
          };
        };
      };
    };
    post: {
      parameters: {
        query: {
          post?: string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
        /** Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/posts/{id}/answers": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": components["schemas"]["AnswersUsersContract"];
            "application/json": components["schemas"]["AnswersUsersContract"];
            "text/json": components["schemas"]["AnswersUsersContract"];
          };
        };
        /** Unauthorized */
        401: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
    post: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
        /** Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** Unauthorized */
        401: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** Conflict */
        409: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json-patch+json": components["schemas"]["SubmissionContract"][];
          "application/json": components["schemas"]["SubmissionContract"][];
          "text/json": components["schemas"]["SubmissionContract"][];
          "application/*+json": components["schemas"]["SubmissionContract"][];
        };
      };
    };
  };
  "/posts/{id}/files": {
    put: {
      parameters: {
        path: {
          id: string;
        };
        query: {
          query?: components["schemas"]["ImageQuery"];
        };
      };
      responses: {
        /** Success */
        200: unknown;
        /** Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** Unauthorized */
        401: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
      requestBody: {
        content: {
          "multipart/form-data": {
            /** Format: binary */
            image?: string;
          };
        };
      };
    };
  };
  "/posts": {
    post: {
      responses: {
        /** Success */
        201: {
          content: {
            "text/plain": components["schemas"]["MinimalPostContract"];
            "application/json": components["schemas"]["MinimalPostContract"];
            "text/json": components["schemas"]["MinimalPostContract"];
          };
        };
        /** Unauthorized */
        401: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** Server Error */
        500: unknown;
      };
      requestBody: {
        content: {
          "application/json-patch+json": components["schemas"]["PostContract"];
          "application/json": components["schemas"]["PostContract"];
          "text/json": components["schemas"]["PostContract"];
          "application/*+json": components["schemas"]["PostContract"];
        };
      };
    };
  };
  "/posts/{id}/unpublish": {
    post: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": components["schemas"]["FullPostContract"];
            "application/json": components["schemas"]["FullPostContract"];
            "text/json": components["schemas"]["FullPostContract"];
          };
        };
      };
    };
  };
  "/posts/{id}/publish": {
    post: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": components["schemas"]["FullPostContract"];
            "application/json": components["schemas"]["FullPostContract"];
            "text/json": components["schemas"]["FullPostContract"];
          };
        };
        /** Unauthorized */
        401: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/posts/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
        query: {
          key?: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": components["schemas"]["PostWithQuestionsContract"];
            "application/json": components["schemas"]["PostWithQuestionsContract"];
            "text/json": components["schemas"]["PostWithQuestionsContract"];
          };
        };
        /** Unauthorized */
        401: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
    patch: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": components["schemas"]["FullPostContract"];
            "application/json": components["schemas"]["FullPostContract"];
            "text/json": components["schemas"]["FullPostContract"];
          };
        };
        /** Unauthorized */
        401: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json-patch+json": components["schemas"]["PostUpdateContract"];
          "application/json": components["schemas"]["PostUpdateContract"];
          "text/json": components["schemas"]["PostUpdateContract"];
          "application/*+json": components["schemas"]["PostUpdateContract"];
        };
      };
    };
  };
  "/users/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": components["schemas"]["UserContract"];
            "application/json": components["schemas"]["UserContract"];
            "text/json": components["schemas"]["UserContract"];
          };
        };
        /** Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/users/{id}/minimal": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": components["schemas"]["UserMinimalContract"];
            "application/json": components["schemas"]["UserMinimalContract"];
            "text/json": components["schemas"]["UserMinimalContract"];
          };
        };
        /** Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/me/posts": {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": components["schemas"]["MinimalPostContract"][];
            "application/json": components["schemas"]["MinimalPostContract"][];
            "text/json": components["schemas"]["MinimalPostContract"][];
          };
        };
        /** Unauthorized */
        401: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/me": {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": components["schemas"]["UserContract"];
            "application/json": components["schemas"]["UserContract"];
            "text/json": components["schemas"]["UserContract"];
          };
        };
        /** Unauthorized */
        401: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
}

export interface components {
  schemas: {
    /** @enum {string} */
    Accessibility: "Public" | "Link" | "FriendsOnly" | "Whitelist";
    AnswerContract: {
      submissions?: components["schemas"]["Submission"][] | null;
      user?: string | null;
    };
    AnswersUsersContract: {
      users?: components["schemas"]["UserInAnswerContract"][] | null;
      answers?: components["schemas"]["AnswerContract"][] | null;
    };
    FullPostContract: {
      id?: string | null;
      author_id?: string | null;
      is_active?: boolean;
      /** Format: date-time */
      active_to?: string;
      icon?: string | null;
      banner?: string | null;
      title?: string | null;
      access_key?: string | null;
      description?: string | null;
      excerpt?: string | null;
      gamemode?: components["schemas"]["Gamemode"];
      accessibility?: components["schemas"]["Accessibility"];
      limitations?: components["schemas"]["Limitations"];
      published?: boolean;
      questions?: components["schemas"]["Question"][] | null;
      /** Format: date-time */
      publish_time?: string;
    };
    /** @enum {string} */
    Gamemode: "None" | "Osu" | "Taiko" | "Fruits" | "Mania";
    /** @enum {string} */
    ImageQuery: "Icon" | "Banner";
    Limitations: {
      rank?: components["schemas"]["MongoDbRange"];
      pp?: components["schemas"]["MongoDbRange"];
    };
    MinimalPostContract: {
      id?: string | null;
      author_id?: string | null;
      is_active?: boolean;
      /** Format: date-time */
      active_to?: string;
      icon?: string | null;
      banner?: string | null;
      title?: string | null;
      description?: string | null;
      excerpt?: string | null;
      gamemode?: components["schemas"]["Gamemode"];
      /** Format: date-time */
      publish_time?: string;
      accessibility?: components["schemas"]["Accessibility"];
      limitations?: components["schemas"]["Limitations"];
      /** Format: int32 */
      answer_count?: number;
    };
    MongoDbRange: {
      /** Format: int32 */
      start?: number;
      /** Format: int32 */
      end?: number;
    };
    OsuAnswerContract: {
      avatar_url?: string | null;
      username?: string | null;
      statistics?: unknown | null;
      country_code?: unknown | null;
    };
    PageContract: {
      users?: components["schemas"]["UserMinimalContract"][] | null;
      posts?: components["schemas"]["MinimalPostContract"][] | null;
    };
    PostContract: {
      title: string;
      description?: string | null;
      excerpt?: string | null;
      gamemode?: components["schemas"]["Gamemode"];
      accessibility?: components["schemas"]["Accessibility"];
      limitations?: components["schemas"]["Limitations"];
      /** Format: date-time */
      active_to?: string;
      questions: components["schemas"]["Question"][];
    };
    /** @enum {string} */
    PostFilter: "Both" | "Active" | "Inactive";
    PostUpdateContract: {
      title?: string | null;
      description?: string | null;
      excerpt?: string | null;
      gamemode?: components["schemas"]["Gamemode"];
      limitations?: components["schemas"]["Limitations"];
      questions?: components["schemas"]["QuestionUpdateContract"][] | null;
    };
    PostWithQuestionsContract: {
      questions?: components["schemas"]["Question"][] | null;
      id?: string | null;
      author_id?: string | null;
      is_active?: boolean;
      /** Format: date-time */
      active_to?: string;
      icon?: string | null;
      banner?: string | null;
      title?: string | null;
      description?: string | null;
      excerpt?: string | null;
      gamemode?: components["schemas"]["Gamemode"];
      /** Format: date-time */
      publish_time?: string;
      accessibility?: components["schemas"]["Accessibility"];
      limitations?: components["schemas"]["Limitations"];
      /** Format: int32 */
      answer_count?: number;
    };
    ProblemDetails: {
      type?: string | null;
      title?: string | null;
      /** Format: int32 */
      status?: number | null;
      detail?: string | null;
      instance?: string | null;
    } & { [key: string]: unknown };
    Question: {
      question_id?: string | null;
      /** Format: int32 */
      order?: number;
      type: components["schemas"]["QuestionType"];
      title: string;
      is_optional?: boolean;
      question_info?: string[] | null;
    };
    /** @enum {string} */
    QuestionType: "Checkbox" | "Freeform" | "Choice";
    QuestionUpdateContract: {
      id?: string | null;
      delete?: boolean;
      /** Format: int32 */
      order?: number;
      type?: components["schemas"]["QuestionType"];
      title?: string | null;
      is_optional?: boolean;
      question_info?: string[] | null;
    };
    Submission: {
      question_id?: string | null;
      answer?: string | null;
    };
    SubmissionContract: {
      question_id: string;
      answer: string;
    };
    UserContract: {
      id?: string | null;
      discord?: string | null;
      osu?: { [key: string]: unknown } | null;
    };
    UserInAnswerContract: {
      id?: string | null;
      discord?: string | null;
      osu?: components["schemas"]["OsuAnswerContract"];
    };
    UserMinimalContract: {
      id?: string | null;
      avatar_url?: string | null;
      discord?: string | null;
      username?: string | null;
    };
  };
}

export interface operations {}

export interface external {}
