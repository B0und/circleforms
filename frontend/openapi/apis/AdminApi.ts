// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * CircleForms
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    FullPostContract,
    FullPostContractFromJSON,
    FullPostContractToJSON,
    MinimalPostContract,
    MinimalPostContractFromJSON,
    MinimalPostContractToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    UserContract,
    UserContractFromJSON,
    UserContractToJSON,
} from '../models';

export interface AdminPostsCachedIdGetRequest {
    id: string;
}

export interface AdminPostsMongoIdGetRequest {
    id: string;
}

export interface AdminUsersPatchRequest {
    id?: string;
    roles?: number;
}

/**
 * 
 */
export class AdminApi extends runtime.BaseAPI {

    /**
     * Get all posts. (Auth roles: SuperAdmin,Admin)
     */
    async adminPostsCachedGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<MinimalPostContract>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/posts/cached`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MinimalPostContractFromJSON));
    }

    /**
     * Get all posts. (Auth roles: SuperAdmin,Admin)
     */
    async adminPostsCachedGet(initOverrides?: RequestInit): Promise<Array<MinimalPostContract>> {
        const response = await this.adminPostsCachedGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a post. (Auth roles: SuperAdmin,Admin)
     */
    async adminPostsCachedIdGetRaw(requestParameters: AdminPostsCachedIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling adminPostsCachedIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/posts/cached/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get a post. (Auth roles: SuperAdmin,Admin)
     */
    async adminPostsCachedIdGet(requestParameters: AdminPostsCachedIdGetRequest, initOverrides?: RequestInit): Promise<void> {
        await this.adminPostsCachedIdGetRaw(requestParameters, initOverrides);
    }

    /**
     * Get all uncached posts. (Auth roles: SuperAdmin,Admin)
     */
    async adminPostsMongoGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<FullPostContract>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/posts/mongo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FullPostContractFromJSON));
    }

    /**
     * Get all uncached posts. (Auth roles: SuperAdmin,Admin)
     */
    async adminPostsMongoGet(initOverrides?: RequestInit): Promise<Array<FullPostContract>> {
        const response = await this.adminPostsMongoGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get uncached post. (Auth roles: SuperAdmin,Admin)
     */
    async adminPostsMongoIdGetRaw(requestParameters: AdminPostsMongoIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling adminPostsMongoIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/posts/mongo/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get uncached post. (Auth roles: SuperAdmin,Admin)
     */
    async adminPostsMongoIdGet(requestParameters: AdminPostsMongoIdGetRequest, initOverrides?: RequestInit): Promise<void> {
        await this.adminPostsMongoIdGetRaw(requestParameters, initOverrides);
    }

    /**
     *  (Auth roles: SuperAdmin,Admin)
     */
    async adminRecachePostRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/recache`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     *  (Auth roles: SuperAdmin,Admin)
     */
    async adminRecachePost(initOverrides?: RequestInit): Promise<void> {
        await this.adminRecachePostRaw(initOverrides);
    }

    /**
     * Get all users. (Auth roles: SuperAdmin,Admin)
     */
    async adminUsersGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<UserContract>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserContractFromJSON));
    }

    /**
     * Get all users. (Auth roles: SuperAdmin,Admin)
     */
    async adminUsersGet(initOverrides?: RequestInit): Promise<Array<UserContract>> {
        const response = await this.adminUsersGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Set user role. (Auth roles: SuperAdmin, SuperAdmin,Admin)
     */
    async adminUsersPatchRaw(requestParameters: AdminUsersPatchRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UserContract>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.roles !== undefined) {
            queryParameters['roles'] = requestParameters.roles;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/users`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserContractFromJSON(jsonValue));
    }

    /**
     * Set user role. (Auth roles: SuperAdmin, SuperAdmin,Admin)
     */
    async adminUsersPatch(requestParameters: AdminUsersPatchRequest = {}, initOverrides?: RequestInit): Promise<UserContract> {
        const response = await this.adminUsersPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
