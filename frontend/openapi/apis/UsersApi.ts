// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * CircleForms
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    MinimalPostContract,
    MinimalPostContractFromJSON,
    MinimalPostContractToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    UserContract,
    UserContractFromJSON,
    UserContractToJSON,
    UserMinimalContract,
    UserMinimalContractFromJSON,
    UserMinimalContractToJSON,
} from '../models';

export interface UsersIdGetRequest {
    id: string;
}

export interface UsersIdMinimalGetRequest {
    id: string;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * Get data for current user. (Requires auth)
     */
    async meGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<UserContract>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserContractFromJSON(jsonValue));
    }

    /**
     * Get data for current user. (Requires auth)
     */
    async meGet(initOverrides?: RequestInit): Promise<UserContract> {
        const response = await this.meGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get user\'s posts. (Requires auth)
     */
    async mePostsGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<MinimalPostContract>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/me/posts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MinimalPostContractFromJSON));
    }

    /**
     * Get user\'s posts. (Requires auth)
     */
    async mePostsGet(initOverrides?: RequestInit): Promise<Array<MinimalPostContract>> {
        const response = await this.mePostsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get user data.
     */
    async usersIdGetRaw(requestParameters: UsersIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UserContract>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserContractFromJSON(jsonValue));
    }

    /**
     * Get user data.
     */
    async usersIdGet(requestParameters: UsersIdGetRequest, initOverrides?: RequestInit): Promise<UserContract> {
        const response = await this.usersIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get user data.
     */
    async usersIdMinimalGetRaw(requestParameters: UsersIdMinimalGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UserMinimalContract>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersIdMinimalGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}/minimal`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserMinimalContractFromJSON(jsonValue));
    }

    /**
     * Get user data.
     */
    async usersIdMinimalGet(requestParameters: UsersIdMinimalGetRequest, initOverrides?: RequestInit): Promise<UserMinimalContract> {
        const response = await this.usersIdMinimalGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
