// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * CircleForms
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AnswersUsersContract,
    AnswersUsersContractFromJSON,
    AnswersUsersContractToJSON,
    FullPostContract,
    FullPostContractFromJSON,
    FullPostContractToJSON,
    ImageQuery,
    ImageQueryFromJSON,
    ImageQueryToJSON,
    MinimalPostContract,
    MinimalPostContractFromJSON,
    MinimalPostContractToJSON,
    PostContract,
    PostContractFromJSON,
    PostContractToJSON,
    PostUpdateContract,
    PostUpdateContractFromJSON,
    PostUpdateContractToJSON,
    PostWithQuestionsContract,
    PostWithQuestionsContractFromJSON,
    PostWithQuestionsContractToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    SubmissionContract,
    SubmissionContractFromJSON,
    SubmissionContractToJSON,
} from '../models';

export interface PostsIdAnswersGetRequest {
    id: string;
}

export interface PostsIdAnswersPostRequest {
    id: string;
    submissionContract?: Array<SubmissionContract>;
}

export interface PostsIdFilesPutRequest {
    id: string;
    query?: ImageQuery;
    image?: Blob;
}

export interface PostsIdGetRequest {
    id: string;
    key?: string;
}

export interface PostsIdPatchRequest {
    id: string;
    postUpdateContract?: PostUpdateContract;
}

export interface PostsIdPublishPostRequest {
    id: string;
}

export interface PostsIdUnpublishPostRequest {
    id: string;
}

export interface PostsPostRequest {
    postContract?: PostContract;
}

/**
 * 
 */
export class PostsApi extends runtime.BaseAPI {

    /**
     * Get posts\' answers. (Requires auth)
     */
    async postsIdAnswersGetRaw(requestParameters: PostsIdAnswersGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AnswersUsersContract>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postsIdAnswersGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/posts/{id}/answers`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnswersUsersContractFromJSON(jsonValue));
    }

    /**
     * Get posts\' answers. (Requires auth)
     */
    async postsIdAnswersGet(requestParameters: PostsIdAnswersGetRequest, initOverrides?: RequestInit): Promise<AnswersUsersContract> {
        const response = await this.postsIdAnswersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add answer to a question. (Requires auth)
     */
    async postsIdAnswersPostRaw(requestParameters: PostsIdAnswersPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postsIdAnswersPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/posts/{id}/answers`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.submissionContract.map(SubmissionContractToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add answer to a question. (Requires auth)
     */
    async postsIdAnswersPost(requestParameters: PostsIdAnswersPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.postsIdAnswersPostRaw(requestParameters, initOverrides);
    }

    /**
     * Upload an image. (Requires auth)
     */
    async postsIdFilesPutRaw(requestParameters: PostsIdFilesPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postsIdFilesPut.');
        }

        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.image !== undefined) {
            formParams.append('image', requestParameters.image as any);
        }

        const response = await this.request({
            path: `/posts/{id}/files`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Upload an image. (Requires auth)
     */
    async postsIdFilesPut(requestParameters: PostsIdFilesPutRequest, initOverrides?: RequestInit): Promise<void> {
        await this.postsIdFilesPutRaw(requestParameters, initOverrides);
    }

    /**
     * Get full info about a page if you are the creator of the page, otherwise return cached version
     */
    async postsIdGetRaw(requestParameters: PostsIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PostWithQuestionsContract>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postsIdGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.key !== undefined) {
            queryParameters['key'] = requestParameters.key;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/posts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostWithQuestionsContractFromJSON(jsonValue));
    }

    /**
     * Get full info about a page if you are the creator of the page, otherwise return cached version
     */
    async postsIdGet(requestParameters: PostsIdGetRequest, initOverrides?: RequestInit): Promise<PostWithQuestionsContract> {
        const response = await this.postsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update post. (Requires auth)
     */
    async postsIdPatchRaw(requestParameters: PostsIdPatchRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<FullPostContract>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postsIdPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/posts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PostUpdateContractToJSON(requestParameters.postUpdateContract),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FullPostContractFromJSON(jsonValue));
    }

    /**
     * Update post. (Requires auth)
     */
    async postsIdPatch(requestParameters: PostsIdPatchRequest, initOverrides?: RequestInit): Promise<FullPostContract> {
        const response = await this.postsIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Publish a post. (Requires auth)
     */
    async postsIdPublishPostRaw(requestParameters: PostsIdPublishPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<FullPostContract>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postsIdPublishPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/posts/{id}/publish`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FullPostContractFromJSON(jsonValue));
    }

    /**
     * Publish a post. (Requires auth)
     */
    async postsIdPublishPost(requestParameters: PostsIdPublishPostRequest, initOverrides?: RequestInit): Promise<FullPostContract> {
        const response = await this.postsIdPublishPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Unpublish a post. (Requires auth. Required Admin,Moderator)
     */
    async postsIdUnpublishPostRaw(requestParameters: PostsIdUnpublishPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<FullPostContract>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postsIdUnpublishPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/posts/{id}/unpublish`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FullPostContractFromJSON(jsonValue));
    }

    /**
     * Unpublish a post. (Requires auth. Required Admin,Moderator)
     */
    async postsIdUnpublishPost(requestParameters: PostsIdUnpublishPostRequest, initOverrides?: RequestInit): Promise<FullPostContract> {
        const response = await this.postsIdUnpublishPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a new post. (Requires auth)
     */
    async postsPostRaw(requestParameters: PostsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MinimalPostContract>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/posts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostContractToJSON(requestParameters.postContract),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MinimalPostContractFromJSON(jsonValue));
    }

    /**
     * Add a new post. (Requires auth)
     */
    async postsPost(requestParameters: PostsPostRequest = {}, initOverrides?: RequestInit): Promise<MinimalPostContract> {
        const response = await this.postsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
