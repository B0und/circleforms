// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * CircleForms
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import {
  AnswerPostContract,
  AnswerPostContractFromJSON,
  AnswerPostContractToJSON,
  AnswersUsersContract,
  AnswersUsersContractFromJSON,
  AnswersUsersContractToJSON,
  ImageQuery,
  ImageQueryFromJSON,
  ImageQueryToJSON,
  MinimalPostContract,
  MinimalPostContractFromJSON,
  MinimalPostContractToJSON,
  PostContract,
  PostContractFromJSON,
  PostContractToJSON,
  PostContractRequest,
  PostContractRequestFromJSON,
  PostContractRequestToJSON,
  ProblemDetails,
  ProblemDetailsFromJSON,
  ProblemDetailsToJSON,
  SubmissionContract,
  SubmissionContractFromJSON,
  SubmissionContractToJSON
} from "../models";

export interface PostsIdAnswersDeleteRequest {
  id: string;
}

export interface PostsIdAnswersGetRequest {
  id: string;
}

export interface PostsIdAnswersPostRequest {
  id: string;
  submissionContract?: Array<SubmissionContract>;
}

export interface PostsIdDeleteRequest {
  id: string;
}

export interface PostsIdFilesPutRequest {
  id: string;
  query?: ImageQuery;
  image?: Blob;
}

export interface PostsIdGetRequest {
  id: string;
  key?: string;
}

export interface PostsIdPublishPostRequest {
  id: string;
}

export interface PostsIdPutRequest {
  id: string;
  postContractRequest?: PostContractRequest;
}

export interface PostsIdUnpublishPostRequest {
  id: string;
}

export interface PostsPostRequest {
  postContractRequest?: PostContractRequest;
}

/**
 *
 */
export class PostsApi extends runtime.BaseAPI {
  /**
   * Get IDs of all published posts
   */
  async postsAllGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<string>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/posts/all`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Get IDs of all published posts
   */
  async postsAllGet(initOverrides?: RequestInit): Promise<Array<string>> {
    const response = await this.postsAllGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Delete user\'s answer from a post (Auth)
   */
  async postsIdAnswersDeleteRaw(
    requestParameters: PostsIdAnswersDeleteRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling postsIdAnswersDelete."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/posts/{id}/answers`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete user\'s answer from a post (Auth)
   */
  async postsIdAnswersDelete(
    requestParameters: PostsIdAnswersDeleteRequest,
    initOverrides?: RequestInit
  ): Promise<void> {
    await this.postsIdAnswersDeleteRaw(requestParameters, initOverrides);
  }

  /**
   * Get posts\' answers. (Auth)
   */
  async postsIdAnswersGetRaw(
    requestParameters: PostsIdAnswersGetRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<AnswersUsersContract>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling postsIdAnswersGet."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/posts/{id}/answers`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AnswersUsersContractFromJSON(jsonValue)
    );
  }

  /**
   * Get posts\' answers. (Auth)
   */
  async postsIdAnswersGet(
    requestParameters: PostsIdAnswersGetRequest,
    initOverrides?: RequestInit
  ): Promise<AnswersUsersContract> {
    const response = await this.postsIdAnswersGetRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Add answer to a question. (Auth)
   */
  async postsIdAnswersPostRaw(
    requestParameters: PostsIdAnswersPostRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling postsIdAnswersPost."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json-patch+json";

    const response = await this.request(
      {
        path: `/posts/{id}/answers`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.submissionContract.map(SubmissionContractToJSON)
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Add answer to a question. (Auth)
   */
  async postsIdAnswersPost(
    requestParameters: PostsIdAnswersPostRequest,
    initOverrides?: RequestInit
  ): Promise<void> {
    await this.postsIdAnswersPostRaw(requestParameters, initOverrides);
  }

  /**
   * Delete post if not published.
   */
  async postsIdDeleteRaw(
    requestParameters: PostsIdDeleteRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling postsIdDelete."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/posts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete post if not published.
   */
  async postsIdDelete(
    requestParameters: PostsIdDeleteRequest,
    initOverrides?: RequestInit
  ): Promise<void> {
    await this.postsIdDeleteRaw(requestParameters, initOverrides);
  }

  /**
   * Upload an image. (Auth)
   */
  async postsIdFilesPutRaw(
    requestParameters: PostsIdFilesPutRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling postsIdFilesPut."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.query !== undefined) {
      queryParameters["query"] = requestParameters.query;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const consumes: runtime.Consume[] = [{ contentType: "multipart/form-data" }];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters.image !== undefined) {
      formParams.append("image", requestParameters.image as any);
    }

    const response = await this.request(
      {
        path: `/posts/{id}/files`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: formParams
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Upload an image. (Auth)
   */
  async postsIdFilesPut(
    requestParameters: PostsIdFilesPutRequest,
    initOverrides?: RequestInit
  ): Promise<void> {
    await this.postsIdFilesPutRaw(requestParameters, initOverrides);
  }

  /**
   * Get full info about a page if you are the creator of the page, otherwise return cached version.
   */
  async postsIdGetRaw(
    requestParameters: PostsIdGetRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<AnswerPostContract>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling postsIdGet."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.key !== undefined) {
      queryParameters["key"] = requestParameters.key;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/posts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AnswerPostContractFromJSON(jsonValue)
    );
  }

  /**
   * Get full info about a page if you are the creator of the page, otherwise return cached version.
   */
  async postsIdGet(
    requestParameters: PostsIdGetRequest,
    initOverrides?: RequestInit
  ): Promise<AnswerPostContract> {
    const response = await this.postsIdGetRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Publish a post. (Auth)
   */
  async postsIdPublishPostRaw(
    requestParameters: PostsIdPublishPostRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<PostContract>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling postsIdPublishPost."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/posts/{id}/publish`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => PostContractFromJSON(jsonValue));
  }

  /**
   * Publish a post. (Auth)
   */
  async postsIdPublishPost(
    requestParameters: PostsIdPublishPostRequest,
    initOverrides?: RequestInit
  ): Promise<PostContract> {
    const response = await this.postsIdPublishPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Update post. (Auth)
   */
  async postsIdPutRaw(
    requestParameters: PostsIdPutRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<PostContract>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling postsIdPut."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json-patch+json";

    const response = await this.request(
      {
        path: `/posts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: PostContractRequestToJSON(requestParameters.postContractRequest)
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => PostContractFromJSON(jsonValue));
  }

  /**
   * Update post. (Auth)
   */
  async postsIdPut(
    requestParameters: PostsIdPutRequest,
    initOverrides?: RequestInit
  ): Promise<PostContract> {
    const response = await this.postsIdPutRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Unpublish a post. (Auth roles: Admin,Moderator)
   */
  async postsIdUnpublishPostRaw(
    requestParameters: PostsIdUnpublishPostRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<PostContract>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling postsIdUnpublishPost."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/posts/{id}/unpublish`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => PostContractFromJSON(jsonValue));
  }

  /**
   * Unpublish a post. (Auth roles: Admin,Moderator)
   */
  async postsIdUnpublishPost(
    requestParameters: PostsIdUnpublishPostRequest,
    initOverrides?: RequestInit
  ): Promise<PostContract> {
    const response = await this.postsIdUnpublishPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Add a new post. (Auth)
   */
  async postsPostRaw(
    requestParameters: PostsPostRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<MinimalPostContract>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json-patch+json";

    const response = await this.request(
      {
        path: `/posts`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: PostContractRequestToJSON(requestParameters.postContractRequest)
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MinimalPostContractFromJSON(jsonValue)
    );
  }

  /**
   * Add a new post. (Auth)
   */
  async postsPost(
    requestParameters: PostsPostRequest = {},
    initOverrides?: RequestInit
  ): Promise<MinimalPostContract> {
    const response = await this.postsPostRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
