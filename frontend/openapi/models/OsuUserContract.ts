// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * CircleForms
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import {
  AccountHistory,
  AccountHistoryFromJSON,
  AccountHistoryFromJSONTyped,
  AccountHistoryToJSON
} from "./AccountHistory";
import { Kudosu, KudosuFromJSON, KudosuFromJSONTyped, KudosuToJSON } from "./Kudosu";
import {
  MonthlyPlaycount,
  MonthlyPlaycountFromJSON,
  MonthlyPlaycountFromJSONTyped,
  MonthlyPlaycountToJSON
} from "./MonthlyPlaycount";
import {
  RankHistory,
  RankHistoryFromJSON,
  RankHistoryFromJSONTyped,
  RankHistoryToJSON
} from "./RankHistory";
import {
  StatisticsRulesets,
  StatisticsRulesetsFromJSON,
  StatisticsRulesetsFromJSONTyped,
  StatisticsRulesetsToJSON
} from "./StatisticsRulesets";
import { UserBadge, UserBadgeFromJSON, UserBadgeFromJSONTyped, UserBadgeToJSON } from "./UserBadge";

/**
 *
 * @export
 * @interface OsuUserContract
 */
export interface OsuUserContract {
  /**
   *
   * @type {string}
   * @memberof OsuUserContract
   */
  avatarUrl?: string | null;
  /**
   *
   * @type {string}
   * @memberof OsuUserContract
   */
  countryCode?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof OsuUserContract
   */
  isActive?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof OsuUserContract
   */
  isSupporter?: boolean;
  /**
   *
   * @type {Date}
   * @memberof OsuUserContract
   */
  lastVisit?: Date;
  /**
   *
   * @type {boolean}
   * @memberof OsuUserContract
   */
  pmFriendsOnly?: boolean;
  /**
   *
   * @type {string}
   * @memberof OsuUserContract
   */
  username?: string | null;
  /**
   *
   * @type {string}
   * @memberof OsuUserContract
   */
  discord?: string | null;
  /**
   *
   * @type {Date}
   * @memberof OsuUserContract
   */
  joinDate?: Date;
  /**
   *
   * @type {Kudosu}
   * @memberof OsuUserContract
   */
  kudosu?: Kudosu;
  /**
   *
   * @type {string}
   * @memberof OsuUserContract
   */
  playmode?: string | null;
  /**
   *
   * @type {Array<string>}
   * @memberof OsuUserContract
   */
  playstyle?: Array<string> | null;
  /**
   *
   * @type {string}
   * @memberof OsuUserContract
   */
  title?: string | null;
  /**
   *
   * @type {string}
   * @memberof OsuUserContract
   */
  titleUrl?: string | null;
  /**
   *
   * @type {Array<AccountHistory>}
   * @memberof OsuUserContract
   */
  accountHistory?: Array<AccountHistory> | null;
  /**
   *
   * @type {Array<UserBadge>}
   * @memberof OsuUserContract
   */
  badges?: Array<UserBadge> | null;
  /**
   *
   * @type {number}
   * @memberof OsuUserContract
   */
  followerCount?: number;
  /**
   *
   * @type {number}
   * @memberof OsuUserContract
   */
  lovedBeatmapsetCount?: number;
  /**
   *
   * @type {Array<MonthlyPlaycount>}
   * @memberof OsuUserContract
   */
  monthlyPlaycounts?: Array<MonthlyPlaycount> | null;
  /**
   *
   * @type {Array<string>}
   * @memberof OsuUserContract
   */
  previousUsernames?: Array<string> | null;
  /**
   *
   * @type {number}
   * @memberof OsuUserContract
   */
  rankedBeatmapsetCount?: number;
  /**
   *
   * @type {StatisticsRulesets}
   * @memberof OsuUserContract
   */
  statisticsRuleset?: StatisticsRulesets;
  /**
   *
   * @type {RankHistory}
   * @memberof OsuUserContract
   */
  rankHistory?: RankHistory;
  /**
   *
   * @type {number}
   * @memberof OsuUserContract
   */
  rankedAndApprovedBeatmapsetCount?: number;
}

export function OsuUserContractFromJSON(json: any): OsuUserContract {
  return OsuUserContractFromJSONTyped(json, false);
}

export function OsuUserContractFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): OsuUserContract {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    avatarUrl: !exists(json, "avatar_url") ? undefined : json["avatar_url"],
    countryCode: !exists(json, "country_code") ? undefined : json["country_code"],
    isActive: !exists(json, "is_active") ? undefined : json["is_active"],
    isSupporter: !exists(json, "is_supporter") ? undefined : json["is_supporter"],
    lastVisit: !exists(json, "last_visit") ? undefined : new Date(json["last_visit"]),
    pmFriendsOnly: !exists(json, "pm_friends_only") ? undefined : json["pm_friends_only"],
    username: !exists(json, "username") ? undefined : json["username"],
    discord: !exists(json, "discord") ? undefined : json["discord"],
    joinDate: !exists(json, "join_date") ? undefined : new Date(json["join_date"]),
    kudosu: !exists(json, "kudosu") ? undefined : KudosuFromJSON(json["kudosu"]),
    playmode: !exists(json, "playmode") ? undefined : json["playmode"],
    playstyle: !exists(json, "playstyle") ? undefined : json["playstyle"],
    title: !exists(json, "title") ? undefined : json["title"],
    titleUrl: !exists(json, "title_url") ? undefined : json["title_url"],
    accountHistory: !exists(json, "account_history")
      ? undefined
      : json["account_history"] === null
      ? null
      : (json["account_history"] as Array<any>).map(AccountHistoryFromJSON),
    badges: !exists(json, "badges")
      ? undefined
      : json["badges"] === null
      ? null
      : (json["badges"] as Array<any>).map(UserBadgeFromJSON),
    followerCount: !exists(json, "follower_count") ? undefined : json["follower_count"],
    lovedBeatmapsetCount: !exists(json, "loved_beatmapset_count")
      ? undefined
      : json["loved_beatmapset_count"],
    monthlyPlaycounts: !exists(json, "monthly_playcounts")
      ? undefined
      : json["monthly_playcounts"] === null
      ? null
      : (json["monthly_playcounts"] as Array<any>).map(MonthlyPlaycountFromJSON),
    previousUsernames: !exists(json, "previous_usernames") ? undefined : json["previous_usernames"],
    rankedBeatmapsetCount: !exists(json, "ranked_beatmapset_count")
      ? undefined
      : json["ranked_beatmapset_count"],
    statisticsRuleset: !exists(json, "statistics_ruleset")
      ? undefined
      : StatisticsRulesetsFromJSON(json["statistics_ruleset"]),
    rankHistory: !exists(json, "rank_history")
      ? undefined
      : RankHistoryFromJSON(json["rank_history"]),
    rankedAndApprovedBeatmapsetCount: !exists(json, "ranked_and_approved_beatmapset_count")
      ? undefined
      : json["ranked_and_approved_beatmapset_count"]
  };
}

export function OsuUserContractToJSON(value?: OsuUserContract | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    avatar_url: value.avatarUrl,
    country_code: value.countryCode,
    is_active: value.isActive,
    is_supporter: value.isSupporter,
    last_visit: value.lastVisit === undefined ? undefined : value.lastVisit.toISOString(),
    pm_friends_only: value.pmFriendsOnly,
    username: value.username,
    discord: value.discord,
    join_date: value.joinDate === undefined ? undefined : value.joinDate.toISOString(),
    kudosu: KudosuToJSON(value.kudosu),
    playmode: value.playmode,
    playstyle: value.playstyle,
    title: value.title,
    title_url: value.titleUrl,
    account_history:
      value.accountHistory === undefined
        ? undefined
        : value.accountHistory === null
        ? null
        : (value.accountHistory as Array<any>).map(AccountHistoryToJSON),
    badges:
      value.badges === undefined
        ? undefined
        : value.badges === null
        ? null
        : (value.badges as Array<any>).map(UserBadgeToJSON),
    follower_count: value.followerCount,
    loved_beatmapset_count: value.lovedBeatmapsetCount,
    monthly_playcounts:
      value.monthlyPlaycounts === undefined
        ? undefined
        : value.monthlyPlaycounts === null
        ? null
        : (value.monthlyPlaycounts as Array<any>).map(MonthlyPlaycountToJSON),
    previous_usernames: value.previousUsernames,
    ranked_beatmapset_count: value.rankedBeatmapsetCount,
    statistics_ruleset: StatisticsRulesetsToJSON(value.statisticsRuleset),
    rank_history: RankHistoryToJSON(value.rankHistory),
    ranked_and_approved_beatmapset_count: value.rankedAndApprovedBeatmapsetCount
  };
}
