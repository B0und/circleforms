// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * CircleForms
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Accessibility,
    AccessibilityFromJSON,
    AccessibilityFromJSONTyped,
    AccessibilityToJSON,
} from './Accessibility';
import {
    Gamemode,
    GamemodeFromJSON,
    GamemodeFromJSONTyped,
    GamemodeToJSON,
} from './Gamemode';
import {
    Limitations,
    LimitationsFromJSON,
    LimitationsFromJSONTyped,
    LimitationsToJSON,
} from './Limitations';
import {
    Question,
    QuestionFromJSON,
    QuestionFromJSONTyped,
    QuestionToJSON,
} from './Question';

/**
 * 
 * @export
 * @interface PostWithQuestionsContract
 */
export interface PostWithQuestionsContract {
    /**
     * 
     * @type {Array<Question>}
     * @memberof PostWithQuestionsContract
     */
    questions?: Array<Question> | null;
    /**
     * 
     * @type {string}
     * @memberof PostWithQuestionsContract
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PostWithQuestionsContract
     */
    authorId?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof PostWithQuestionsContract
     */
    isActive?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof PostWithQuestionsContract
     */
    activeTo?: Date;
    /**
     * 
     * @type {string}
     * @memberof PostWithQuestionsContract
     */
    icon?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PostWithQuestionsContract
     */
    banner?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PostWithQuestionsContract
     */
    title?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PostWithQuestionsContract
     */
    description?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PostWithQuestionsContract
     */
    excerpt?: string | null;
    /**
     * 
     * @type {Gamemode}
     * @memberof PostWithQuestionsContract
     */
    gamemode?: Gamemode;
    /**
     * 
     * @type {Date}
     * @memberof PostWithQuestionsContract
     */
    publishTime?: Date;
    /**
     * 
     * @type {Accessibility}
     * @memberof PostWithQuestionsContract
     */
    accessibility?: Accessibility;
    /**
     * 
     * @type {Limitations}
     * @memberof PostWithQuestionsContract
     */
    limitations?: Limitations;
    /**
     * 
     * @type {number}
     * @memberof PostWithQuestionsContract
     */
    answerCount?: number;
}

export function PostWithQuestionsContractFromJSON(json: any): PostWithQuestionsContract {
    return PostWithQuestionsContractFromJSONTyped(json, false);
}

export function PostWithQuestionsContractFromJSONTyped(json: any, ignoreDiscriminator: boolean): PostWithQuestionsContract {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'questions': !exists(json, 'questions') ? undefined : (json['questions'] === null ? null : (json['questions'] as Array<any>).map(QuestionFromJSON)),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'authorId': !exists(json, 'author_id') ? undefined : json['author_id'],
        'isActive': !exists(json, 'is_active') ? undefined : json['is_active'],
        'activeTo': !exists(json, 'active_to') ? undefined : (new Date(json['active_to'])),
        'icon': !exists(json, 'icon') ? undefined : json['icon'],
        'banner': !exists(json, 'banner') ? undefined : json['banner'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'excerpt': !exists(json, 'excerpt') ? undefined : json['excerpt'],
        'gamemode': !exists(json, 'gamemode') ? undefined : GamemodeFromJSON(json['gamemode']),
        'publishTime': !exists(json, 'publish_time') ? undefined : (new Date(json['publish_time'])),
        'accessibility': !exists(json, 'accessibility') ? undefined : AccessibilityFromJSON(json['accessibility']),
        'limitations': !exists(json, 'limitations') ? undefined : LimitationsFromJSON(json['limitations']),
        'answerCount': !exists(json, 'answer_count') ? undefined : json['answer_count'],
    };
}

export function PostWithQuestionsContractToJSON(value?: PostWithQuestionsContract | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'questions': value.questions === undefined ? undefined : (value.questions === null ? null : (value.questions as Array<any>).map(QuestionToJSON)),
        'id': value.id,
        'author_id': value.authorId,
        'is_active': value.isActive,
        'active_to': value.activeTo === undefined ? undefined : (value.activeTo.toISOString()),
        'icon': value.icon,
        'banner': value.banner,
        'title': value.title,
        'description': value.description,
        'excerpt': value.excerpt,
        'gamemode': GamemodeToJSON(value.gamemode),
        'publish_time': value.publishTime === undefined ? undefined : (value.publishTime.toISOString()),
        'accessibility': AccessibilityToJSON(value.accessibility),
        'limitations': LimitationsToJSON(value.limitations),
        'answer_count': value.answerCount,
    };
}
