// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * CircleForms
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    GradeCounts,
    GradeCountsFromJSON,
    GradeCountsFromJSONTyped,
    GradeCountsToJSON,
} from './GradeCounts';
import {
    Level,
    LevelFromJSON,
    LevelFromJSONTyped,
    LevelToJSON,
} from './Level';

/**
 * 
 * @export
 * @interface Statistics
 */
export interface Statistics {
    /**
     * 
     * @type {Level}
     * @memberof Statistics
     */
    level?: Level;
    /**
     * 
     * @type {number}
     * @memberof Statistics
     */
    global_rank?: number;
    /**
     * 
     * @type {number}
     * @memberof Statistics
     */
    pp?: number;
    /**
     * 
     * @type {number}
     * @memberof Statistics
     */
    ranked_score?: number;
    /**
     * 
     * @type {number}
     * @memberof Statistics
     */
    hit_accuracy?: number;
    /**
     * 
     * @type {number}
     * @memberof Statistics
     */
    play_count?: number;
    /**
     * 
     * @type {number}
     * @memberof Statistics
     */
    play_time?: number;
    /**
     * 
     * @type {number}
     * @memberof Statistics
     */
    total_score?: number;
    /**
     * 
     * @type {number}
     * @memberof Statistics
     */
    total_hits?: number;
    /**
     * 
     * @type {number}
     * @memberof Statistics
     */
    maximum_combo?: number;
    /**
     * 
     * @type {number}
     * @memberof Statistics
     */
    replays_watched_by_others?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Statistics
     */
    is_ranked?: boolean;
    /**
     * 
     * @type {GradeCounts}
     * @memberof Statistics
     */
    grade_counts?: GradeCounts;
    /**
     * 
     * @type {number}
     * @memberof Statistics
     */
    country_rank?: number;
}

export function StatisticsFromJSON(json: any): Statistics {
    return StatisticsFromJSONTyped(json, false);
}

export function StatisticsFromJSONTyped(json: any, ignoreDiscriminator: boolean): Statistics {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'level': !exists(json, 'level') ? undefined : LevelFromJSON(json['level']),
        'global_rank': !exists(json, 'global_rank') ? undefined : json['global_rank'],
        'pp': !exists(json, 'pp') ? undefined : json['pp'],
        'ranked_score': !exists(json, 'ranked_score') ? undefined : json['ranked_score'],
        'hit_accuracy': !exists(json, 'hit_accuracy') ? undefined : json['hit_accuracy'],
        'play_count': !exists(json, 'play_count') ? undefined : json['play_count'],
        'play_time': !exists(json, 'play_time') ? undefined : json['play_time'],
        'total_score': !exists(json, 'total_score') ? undefined : json['total_score'],
        'total_hits': !exists(json, 'total_hits') ? undefined : json['total_hits'],
        'maximum_combo': !exists(json, 'maximum_combo') ? undefined : json['maximum_combo'],
        'replays_watched_by_others': !exists(json, 'replays_watched_by_others') ? undefined : json['replays_watched_by_others'],
        'is_ranked': !exists(json, 'is_ranked') ? undefined : json['is_ranked'],
        'grade_counts': !exists(json, 'grade_counts') ? undefined : GradeCountsFromJSON(json['grade_counts']),
        'country_rank': !exists(json, 'country_rank') ? undefined : json['country_rank'],
    };
}

export function StatisticsToJSON(value?: Statistics | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'level': LevelToJSON(value.level),
        'global_rank': value.global_rank,
        'pp': value.pp,
        'ranked_score': value.ranked_score,
        'hit_accuracy': value.hit_accuracy,
        'play_count': value.play_count,
        'play_time': value.play_time,
        'total_score': value.total_score,
        'total_hits': value.total_hits,
        'maximum_combo': value.maximum_combo,
        'replays_watched_by_others': value.replays_watched_by_others,
        'is_ranked': value.is_ranked,
        'grade_counts': GradeCountsToJSON(value.grade_counts),
        'country_rank': value.country_rank,
    };
}
