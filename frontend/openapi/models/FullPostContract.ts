// @ts-nocheck
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * CircleForms
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import {
  Accessibility,
  AccessibilityFromJSON,
  AccessibilityFromJSONTyped,
  AccessibilityToJSON
} from "./Accessibility";
import { Gamemode, GamemodeFromJSON, GamemodeFromJSONTyped, GamemodeToJSON } from "./Gamemode";
import {
  Limitations,
  LimitationsFromJSON,
  LimitationsFromJSONTyped,
  LimitationsToJSON
} from "./Limitations";
import { Question, QuestionFromJSON, QuestionFromJSONTyped, QuestionToJSON } from "./Question";

/**
 *
 * @export
 * @interface FullPostContract
 */
export interface FullPostContract {
  /**
   *
   * @type {string}
   * @memberof FullPostContract
   */

  /**
   *
   * @type {string}
   * @memberof FullPostContract
   */

  /**
   *
   * @type {boolean}
   * @memberof FullPostContract
   */

  /**
   *
   * @type {Date}
   * @memberof FullPostContract
   */

  /**
   *
   * @type {string}
   * @memberof FullPostContract
   */

  /**
   *
   * @type {string}
   * @memberof FullPostContract
   */

  /**
   *
   * @type {string}
   * @memberof FullPostContract
   */

  /**
   *
   * @type {string}
   * @memberof FullPostContract
   */
  accessKey?: string | null;
  /**
   *
   * @type {string}
   * @memberof FullPostContract
   */

  /**
   *
   * @type {string}
   * @memberof FullPostContract
   */

  /**
   *
   * @type {Gamemode}
   * @memberof FullPostContract
   */

  /**
   *
   * @type {Accessibility}
   * @memberof FullPostContract
   */

  /**
   *
   * @type {Limitations}
   * @memberof FullPostContract
   */

  /**
   *
   * @type {boolean}
   * @memberof FullPostContract
   */

  /**
   *
   * @type {boolean}
   * @memberof FullPostContract
   */

  /**
   *
   * @type {Array<Question>}
   * @memberof FullPostContract
   */

  /**
   *
   * @type {Date}
   * @memberof FullPostContract
   */
}

export function FullPostContractFromJSON(json: any): FullPostContract {
  return FullPostContractFromJSONTyped(json, false);
}

export function FullPostContractFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): FullPostContract {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, "id") ? undefined : json["id"],
    authorId: !exists(json, "author_id") ? undefined : json["author_id"],
    isActive: !exists(json, "is_active") ? undefined : json["is_active"],
    activeTo: !exists(json, "active_to") ? undefined : new Date(json["active_to"]),
    icon: !exists(json, "icon") ? undefined : json["icon"],
    banner: !exists(json, "banner") ? undefined : json["banner"],
    title: !exists(json, "title") ? undefined : json["title"],
    accessKey: !exists(json, "access_key") ? undefined : json["access_key"],
    description: !exists(json, "description") ? undefined : json["description"],
    excerpt: !exists(json, "excerpt") ? undefined : json["excerpt"],
    gamemode: !exists(json, "gamemode") ? undefined : GamemodeFromJSON(json["gamemode"]),
    accessibility: !exists(json, "accessibility")
      ? undefined
      : AccessibilityFromJSON(json["accessibility"]),
    limitations: !exists(json, "limitations")
      ? undefined
      : LimitationsFromJSON(json["limitations"]),
    published: !exists(json, "published") ? undefined : json["published"],
    allowAnswerEdit: !exists(json, "allow_answer_edit") ? undefined : json["allow_answer_edit"],
    questions: !exists(json, "questions")
      ? undefined
      : json["questions"] === null
      ? null
      : (json["questions"] as Array<any>).map(QuestionFromJSON),
    publishTime: !exists(json, "publish_time")
      ? undefined
      : json["publish_time"] === null
      ? null
      : new Date(json["publish_time"])
  };
}

export function FullPostContractToJSON(value?: FullPostContract | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    author_id: value.authorId,
    is_active: value.isActive,
    active_to: value.activeTo === undefined ? undefined : value.activeTo.toISOString(),
    icon: value.icon,
    banner: value.banner,
    title: value.title,
    access_key: value.accessKey,
    description: value.description,
    excerpt: value.excerpt,
    gamemode: GamemodeToJSON(value.gamemode),
    accessibility: AccessibilityToJSON(value.accessibility),
    limitations: LimitationsToJSON(value.limitations),
    published: value.published,
    allow_answer_edit: value.allowAnswerEdit,
    questions:
      value.questions === undefined
        ? undefined
        : value.questions === null
        ? null
        : (value.questions as Array<any>).map(QuestionToJSON),
    publish_time:
      value.publishTime === undefined
        ? undefined
        : value.publishTime === null
        ? null
        : value.publishTime.toISOString()
  };
}
